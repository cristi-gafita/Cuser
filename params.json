{"name":"CuSEr (Customer Smart Entertainer)","tagline":"","body":"# Introduction\r\n\r\nCuSEr (Customer Smart Entertainer) is a single page application ([SPA](https://en.wikipedia.org/wiki/Single-page_application)) for a restaurant that wants to create a new smart social experience for its customers by making use of different social networks and semantic Web technologies. CuSEr creates such an experience which offers customers various entertainment facilities like comics, funny videos, electronic/real games or jokes while waiting for drinks/meals. Also, several collaborative interaction games with other people (i.e. those having similar gastronomical tastes) from the same food establishment may be suggested. This application also offers a multi-language user experience.\r\n\r\n# Technologies\r\n\r\n   All the technologies used in this project are used in real-life application and are considered top of the line.The main technologies used are : \r\n* [AngularJs](https://angularjs.org/) \r\n* [WebApi](http://www.asp.net/web-api) \r\n* [dotNetRDF](http://www.dotnetrdf.org/) \r\n* [Bootstrap](http://getbootstrap.com/) \r\n* [Less](http://lesscss.org/) \r\n* [HTML5](https://ro.wikipedia.org/wiki/HTML5) \r\n* [Entity Framework](https://msdn.microsoft.com/en-us/data/ef.aspx)\r\n\r\n    The front-end is built in AngularJs using a multi-layered service architecture to be easily maintained and respect best practices.In order to easily implement themes in the application but also because it is a newer alternative than CSS less was chosen.The design of the project was built using the popular framework Bootstrap.\r\n    The back-end is built using Microsoft technologies so the REST Api is implemented using WebApi, also to comunicate with the database Entity Framework was used.\r\n    Taking into account that the project is built using mostly .NET technologies dotNetRDF was the obvious choice in order to easily work with RDF, SPARQL and the Semantic Web.\r\n\r\n# Architecture\r\n\r\n    The application has a multi-layered architecture on both the front-end and back-end.Both architecture obey best practices so that the code respects SOLID and REST principles and also that the code is easy to manage and maintain.\r\n\r\n## Front-end\r\n\r\n   ![Front-End Architecture](https://cuser2015.files.wordpress.com/2015/11/arhitectura-front-end.png)\r\n\r\n    The front-end architecture consists of three layers of services as seen in the diagram above.The first service is the configuration service and it has only one responsibility, to provide URLs to the exposed methods of the Web API. The second layer consists of the synchronization service that makes the actual calls to the Web API, this services takes the required url from the configuration service, gets the data from the entity services and makes the call to the Web API. The third layer of services consists of multiple entity services, each entity having it's own service thus obeying the single responsibility principle, any processing of the data, that can be done on the front-end is done inside this service and not in the angular controllers or in the other services.\r\n   The angular controllers are as light as possible with as little logic as possible, where heavy logic is required directives are used.    \r\n\r\n## Back-end\r\n\r\n   ![Back-End Architecture](https://cuser2015.files.wordpress.com/2015/11/backenddiagram.png)\r\n\r\n   The back-end is built around .NET technologies and has four layers.The first layer is represented by the actual database model (internal and external).The second layer is represented by the repositories, the next layer unifies the external and internal data,in here is where the most back-end logic lies as well.The final layer is represented by the WEB API controllers that expose services to the front-end.\r\n\r\n### Web API\r\n\r\n   The Web API is the final layer of the back-end and the layer that exposes data to the front-end.So far the controllers that are considered as needed are:\r\n\r\n* Account\r\n* User\r\n* Restaurant\r\n* Menu\r\n* Recommendation\r\n\r\nMore will be added once the actual implementation of the application begins.\r\n\r\n### Internal data models\r\n\r\n  The database used for internal data will be sql server.The data will be translated into models using entity framework.The models needed to implement this application are:\r\n\r\n* Account\r\n* User\r\n* Restaurant\r\n* Menu\r\n* Dish\r\n* Ingredient\r\n* Recommendation\r\n* Review\r\n* Settings\r\n\r\n### External data sources\r\n\r\n--Vlad Barbaru'\r\n\r\n# Conclusion\r\n   CuSEr is an application that uses the latest technologies and uses architectures that are used in real-life applications. Because no deprecated technologies were used continued support for these technologies is assured for many years to come.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}